components:
  securitySchemes:
    anonUser:
      in: header
      name: X-ANON
      type: apiKey
      x-apikeyInfoFunc: decorators.access_checks.ensure_anon_key
    apiKeyHeader:
      in: header
      name: X-API-KEY
      type: apiKey
      x-apikeyInfoFunc: decorators.access_checks.ensure_key
    oauth2:
      flows:
        implicit:
          authorizationUrl: http://localhost:8081/oauth/authorize
          scopes:
            apiKey: 'Unique identifier of the user accessing the service.'
      type: oauth2
      x-tokenInfoUrl: http://localhost:8081/api/v1/users/validate
info:
  title: CCCS
  version: 3.0.0
openapi: 3.0.0
paths:
  /activities:
    get:
      operationId: get_activities
      parameters:
        - in: query
          name: search_term
          schema:
            type: string
        - in: query
          name: limit
          schema:
            default: 20
            minimum: 0
            type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: ./schemas.yaml#/components/schemas/Activity
                type: array
          description: 'Return Activities'
      summary: 'Get all Activities'
      tags:
        - Activities
      x-openapi-router-controller: api.activity.model
    post:
      operationId: create_activity
      requestBody:
        $ref: ./bodies.yaml#/components/requestBodies/Activity
      responses:
        201:
          description: 'New Activity created'
        409:
          description: 'Activity already exists'
      security:
        - apiKeyHeader: []
      summary: 'Post a activity'
      tags:
        - Activities
      x-openapi-router-controller: api.activity.model
  /activities/count:
    get:
      operationId: get_activity_count
      parameters:
        - in: query
          name: search_term
          schema:
            type: string
      responses:
        200:
          description: 'Row count'
      security:
        - apiKeyHeader: []
      summary: 'Get row count of query'
      tags:
        - Activities
      x-openapi-router-controller: api.activity.model
  /activities/{id}:
    delete:
      operationId: delete_activity
      parameters:
        - description: 'The unique identifer for an Object (i.e. User, Task, Project,
            Submission etc)'
          in: path
          name: id
          required: true
          schema:
            pattern: ^[a-zA-Z0-9-]+$
            type: string
      responses:
        204:
          description: 'Activity was deleted'
        404:
          description: 'Activity does not exist'
      security:
        - apiKeyHeader: []
      summary: 'Remove an Activity'
      tags:
        - Activities
      x-openapi-router-controller: api.activity.model
    get:
      operationId: get_activity
      parameters:
        - description: 'The unique identifer for an Object (i.e. User, Task, Project,
            Submission etc)'
          in: path
          name: id
          required: true
          schema:
            pattern: ^[a-zA-Z0-9-]+$
            type: string
      responses:
        200:
          description: 'Return Activity'
        404:
          description: 'Activity does not exist'
      summary: 'Get a single activity'
      tags:
        - Activities
      x-openapi-router-controller: api.activity.model
    put:
      operationId: update_activity
      parameters:
        - description: 'The unique identifer for an Object (i.e. User, Task, Project,
            Submission etc)'
          in: path
          name: id
          required: true
          schema:
            pattern: ^[a-zA-Z0-9-]+$
            type: string
      requestBody:
        $ref: ./bodies.yaml#/components/requestBodies/Activity
      responses:
        200:
          description: 'Activity modified'
        201:
          description: 'New Activity created'
      security:
        - apiKeyHeader: []
      summary: 'Modify/Create a Activity'
      tags:
        - Activities
      x-openapi-router-controller: api.activity.model
  /activities/{id}/tasks:
    get:
      operationId: get_activity_tasks
      parameters:
        - description: 'The Activity ID'
          in: path
          name: id
          required: true
          schema:
            pattern: ^[a-zA-Z0-9-]+$
            type: string
        - in: query
          name: limit
          schema:
            default: 20
            type: integer
        - in: query
          name: offset
          schema:
            default: 0
            type: integer
      responses:
        200:
          description: 'Return activity tasks'
        404:
          description: 'Activity does not exist'
      summary: 'Get the tasks for an activity'
      tags:
        - Activities
        - Tasks
      x-openapi-router-controller: api.activity.custom
  /comments:
    get:
      operationId: get_comments
      parameters:
        - in: query
          name: search_term
          schema:
            type: string
        - in: query
          name: limit
          schema:
            default: 20
            minimum: 0
            type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: ./schemas.yaml#/components/schemas/Comment
                type: array
          description: 'List of comments'
      summary: 'Get a single comment'
      tags:
        - Comments
      x-openapi-router-controller: api.comment.model
    post:
      operationId: create_comment
      requestBody:
        $ref: ./bodies.yaml#/components/requestBodies/Comment
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: ./schemas.yaml#/components/schemas/Comment
          description: 'Comment created'
        409:
          description: 'Comment already exists'
      security:
        - apiKeyHeader: []
        - anonUser: []
      summary: 'Post a comment'
      tags:
        - Comments
      x-openapi-router-controller: api.comment.model
  /comments/{id}:
    delete:
      operationId: delete_comment
      parameters:
        - description: 'The unique identifer for an Object (i.e. User, Task, Project,
            Submission etc)'
          in: path
          name: id
          required: true
          schema:
            pattern: ^[a-zA-Z0-9-]+$
            type: string
      responses:
        204:
          description: 'Comment was deleted'
        404:
          description: 'Comment does not exist'
      security:
        - apiKeyHeader: []
      summary: 'Remove a Comment'
      tags:
        - Comments
      x-openapi-router-controller: api.comment.model
    get:
      operationId: get_comment
      parameters:
        - description: 'The unique identifer for an Object (i.e. User, Task, Project,
            Submission etc)'
          in: path
          name: id
          required: true
          schema:
            pattern: ^[a-zA-Z0-9-]+$
            type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: ./schemas.yaml#/components/schemas/Comment
          description: 'Return comment'
        404:
          description: 'Comment does not exist'
      security:
        - apiKeyHeader: []
        - anonUser: []
      summary: 'Get a single comment'
      tags:
        - Comments
      x-openapi-router-controller: api.comment.model
    put:
      operationId: update_comment
      parameters:
        - description: 'The unique identifer for an Object (i.e. User, Task, Project,
            Submission etc)'
          in: path
          name: id
          required: true
          schema:
            pattern: ^[a-zA-Z0-9-]+$
            type: string
      requestBody:
        $ref: ./bodies.yaml#/components/requestBodies/Comment
      responses:
        200:
          description: 'Comment modified'
        201:
          description: 'New Comment created'
      security:
        - apiKeyHeader: []
      summary: 'Modify/Create a Comment'
      tags:
        - Comments
      x-openapi-router-controller: api.comment.model
  /media:
    get:
      description: 'Get a list of media'
      operationId: get_media
      parameters:
        - in: query
          name: search_term
          schema:
            type: string
        - in: query
          name: limit
          schema:
            default: 20
            minimum: 0
            type: integer
      responses:
        200:
          description: 'List of media'
      tags:
        - Media
      x-openapi-router-controller: api.media.model
    post:
      description: 'The media details (for files already on the server or remotely
        hosted)'
      operationId: create_medium
      requestBody:
        $ref: ./bodies.yaml#/components/requestBodies/Medium
      responses:
        200:
          description: 'Media attached'
      security:
        - apiKeyHeader: []
      tags:
        - Media
      x-openapi-router-controller: api.media.model
  /media/source/{id}:
    delete:
      operationId: delete_medium
      parameters:
        - description: 'The unique identifer for an Object (i.e. User, Task, Project,
            Submission etc)'
          in: path
          name: id
          required: true
          schema:
            pattern: ^[a-zA-Z0-9-]+$
            type: string
      responses:
        200:
          description: 'Media deleted'
        404:
          description: 'Media does not exist'
      security:
        - apiKeyHeader: []
      summary: 'Delete all media files related to  source'
      tags:
        - Media
      x-openapi-router-controller: api.media.model
    get:
      operationId: get_for_source
      parameters:
        - description: 'The unique identifer for an Object (i.e. User, Task, Project,
            Submission etc)'
          in: path
          name: id
          required: true
          schema:
            pattern: ^[a-zA-Z0-9-]+$
            type: string
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: ./schemas.yaml#/components/schemas/Media
                type: array
          description: 'Return Media'
        404:
          description: 'Media does not exist'
      summary: 'Query media for a specific task or project'
      tags:
        - Media
      x-openapi-router-controller: api.media.custom
  /media/upload:
    get:
      operationId: get_pre_signed_url
      parameters:
        - in: query
          name: source_id
          schema:
            type: string
        - in: query
          name: filename
          schema:
            type: string
      responses:
        200:
          description: 'Return presigned url'
        401:
          description: 'User does not have uploading access'
      security:
        - apiKeyHeader: []
      summary: 'Return pre-authorised url to upload media'
      tags:
        - Media
      x-openapi-router-controller: api.media.custom
  /media/{id}:
    get:
      operationId: get_medium
      parameters:
        - description: 'The unique identifer for an Object (i.e. User, Task, Project,
            Submission etc)'
          in: path
          name: id
          required: true
          schema:
            pattern: ^[a-zA-Z0-9-]+$
            type: string
      responses:
        200:
          content:
            application/json:
              schema:
                format: binary
                type: string
          description: 'Return Media'
        404:
          description: 'Media does not exist'
      summary: 'Get a single file'
      tags:
        - Media
      x-openapi-router-controller: api.media.model
    put:
      operationId: update_medium
      parameters:
        - description: 'The unique identifer for an Object (i.e. User, Task, Project,
            Submission etc)'
          in: path
          name: id
          required: true
          schema:
            pattern: ^[a-zA-Z0-9-]+$
            type: string
      requestBody:
        $ref: ./bodies.yaml#/components/requestBodies/Medium
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: ./schemas.yaml#/components/schemas/Media
          description: 'Return Media'
        404:
          description: 'Media does not exist'
      security:
        - apiKeyHeader: []
      summary: 'Put a single file'
      tags:
        - Media
      x-openapi-router-controller: api.media.model
  /projects:
    get:
      operationId: get_projects
      parameters:
        - in: query
          name: search_term
          schema:
            type: string
        - in: query
          name: limit
          schema:
            default: 20
            minimum: 0
            type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: ./schemas.yaml#/components/schemas/Project
                type: array
          description: 'Return projects'
      summary: 'Get all projects'
      tags:
        - Projects
      x-openapi-router-controller: api.project.model
    post:
      operationId: create_project
      requestBody:
        $ref: ./bodies.yaml#/components/requestBodies/Project
      responses:
        201:
          description: 'New project created'
        409:
          description: 'Project already exists'
      security:
        - apiKeyHeader: []
      summary: 'Post a project'
      tags:
        - Projects
      x-openapi-router-controller: api.project.model
  /projects/count:
    get:
      operationId: get_project_count
      parameters:
        - in: query
          name: search_term
          schema:
            type: string
      responses:
        200:
          description: 'Row count'
      security:
        - apiKeyHeader: []
      summary: 'Get row count of query'
      tags:
        - Projects
      x-openapi-router-controller: api.project.model
  /projects/{id}:
    delete:
      operationId: delete_project
      parameters:
        - description: 'The unique identifer for an Object (i.e. User, Task, Project,
            Submission etc)'
          in: path
          name: id
          required: true
          schema:
            pattern: ^[a-zA-Z0-9-]+$
            type: string
      responses:
        204:
          description: 'Project was deleted'
        404:
          description: 'Project does not exist'
      security:
        - apiKeyHeader: []
      summary: 'Remove a project'
      tags:
        - Projects
      x-openapi-router-controller: api.project.model
    get:
      operationId: get_project
      parameters:
        - description: 'The unique identifer for an Object (i.e. User, Task, Project,
            Submission etc)'
          in: path
          name: id
          required: true
          schema:
            pattern: ^[a-zA-Z0-9-]+$
            type: string
      responses:
        200:
          description: 'Return project'
        404:
          description: 'Project does not exist'
      summary: 'Get a single project'
      tags:
        - Projects
      x-openapi-router-controller: api.project.model
    put:
      operationId: update_project
      parameters:
        - description: 'The unique identifer for an Object (i.e. User, Task, Project,
            Submission etc)'
          in: path
          name: id
          required: true
          schema:
            pattern: ^[a-zA-Z0-9-]+$
            type: string
      requestBody:
        $ref: ./bodies.yaml#/components/requestBodies/Project
      responses:
        200:
          description: 'Project modified'
        201:
          description: 'New project created'
      security:
        - apiKeyHeader: []
      summary: 'Modify/Create a project'
      tags:
        - Projects
      x-openapi-router-controller: api.project.model
  /projects/{id}/activities:
    get:
      operationId: get_project_activities
      parameters:
        - description: 'The ID of the project'
          in: path
          name: id
          required: true
          schema:
            pattern: ^[a-zA-Z0-9-]+$
            type: string
      responses:
        200:
          description: 'Return Activities'
        404:
          description: 'Project does not exist'
      summary: 'Get all activities related to a project'
      tags:
        - Projects
        - Activities
      x-openapi-router-controller: api.project.custom
  /submission/{id}:
    delete:
      operationId: delete_submission
      parameters:
        - description: 'The unique identifer for an Object (i.e. User, Task, Project,
            Submission etc)'
          in: path
          name: id
          required: true
          schema:
            pattern: ^[a-zA-Z0-9-]+$
            type: string
      responses:
        204:
          description: 'Submission was deleted'
        404:
          description: 'Submission does not exist'
      security:
        - apiKeyHeader: []
      summary: 'Remove a submission'
      tags:
        - Submissions
      x-openapi-router-controller: api.submission.model
    get:
      operationId: get_submission
      parameters:
        - description: 'The unique identifer for an Object (i.e. User, Task, Project,
            Submission etc)'
          in: path
          name: id
          required: true
          schema:
            pattern: ^[a-zA-Z0-9-]+$
            type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: ./schemas.yaml#/components/schemas/Submission
          description: 'Return submission'
        404:
          description: 'Submission does not exist'
      security:
        - apiKeyHeader: []
      summary: 'Get a single submission'
      tags:
        - Submissions
      x-openapi-router-controller: api.submission.model
    put:
      operationId: update_submission
      parameters:
        - description: 'The unique identifer for an Object (i.e. User, Task, Project,
            Submission etc)'
          in: path
          name: id
          required: true
          schema:
            pattern: ^[a-zA-Z0-9-]+$
            type: string
      requestBody:
        $ref: ./bodies.yaml#/components/requestBodies/Submission
      responses:
        200:
          description: 'Submission modified'
        201:
          description: 'New submission created'
      security:
        - apiKeyHeader: []
      summary: 'Modify/Create a submission'
      tags:
        - Submissions
      x-openapi-router-controller: api.submission.model
  /submissions:
    get:
      operationId: get_submissions
      parameters:
        - in: query
          name: search_term
          schema:
            type: string
        - in: query
          name: limit
          schema:
            default: 20
            minimum: 0
            type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: ./schemas.yaml#/components/schemas/Submission
                type: array
          description: 'List of submissions'
      summary: 'Get all submissions'
      tags:
        - Submissions
      x-openapi-router-controller: api.submission.model
    post:
      operationId: create_submission
      requestBody:
        $ref: ./bodies.yaml#/components/requestBodies/Submission
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: ./schemas.yaml#/components/schemas/Submission
          description: 'Submission created'
      security:
        - apiKeyHeader: []
        - anonUser: []
      summary: 'Post a submission'
      tags:
        - Submissions
      x-openapi-router-controller: api.submission.model
  /submissions/count:
    get:
      operationId: get_submission_count
      parameters:
        - in: query
          name: search_term
          schema:
            type: string
      responses:
        200:
          description: 'Row count'
      security:
        - apiKeyHeader: []
      summary: 'Get row count of query'
      tags:
        - Submissions
      x-openapi-router-controller: api.submission.model
  /task:
    post:
      operationId: create_task
      requestBody:
        $ref: ./bodies.yaml#/components/requestBodies/Task
      responses:
        201:
          content:
            application/json:
              schema:
                items:
                  $ref: ./schemas.yaml#/components/schemas/Task
                type: array
          description: 'Task created'
      security:
        - apiKeyHeader: []
      summary: 'Post a single task'
      tags:
        - Tasks
      x-openapi-router-controller: api.task.model
  /tasks:
    delete:
      operationId: delete_tasks
      requestBody:
        content:
          application/json:
            schema:
              items:
                type: string
              type: array
      responses:
        204:
          description: 'Tasks were deleted'
      security:
        - apiKeyHeader: []
      summary: 'Delete an array of tasks'
      tags:
        - Tasks
      x-openapi-router-controller: api.task.custom
    get:
      operationId: get_tasks
      parameters:
        - in: query
          name: offset
          schema:
            default: 0
            type: number
        - in: query
          name: search_term
          schema:
            type: string
        - in: query
          name: limit
          schema:
            default: 20
            minimum: 0
            type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: ./schemas.yaml#/components/schemas/Task
                type: array
          description: 'List of tasks'
      security:
        - apiKeyHeader: []
        - anonUser: []
      summary: 'Get a list of tasks'
      tags:
        - Tasks
      x-openapi-router-controller: api.task.model
    post:
      operationId: create_tasks
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: ./schemas.yaml#/components/schemas/Task
              type: array
        description: 'List of tasks'
      responses:
        201:
          content:
            application/json:
              schema:
                items:
                  $ref: ./schemas.yaml#/components/schemas/Task
                type: array
          description: 'Task created'
      security:
        - apiKeyHeader: []
      summary: 'Post an array of tasks'
      tags:
        - Tasks
      x-openapi-router-controller: api.task.model
  /tasks/count:
    get:
      operationId: get_task_count
      parameters:
        - in: query
          name: search_term
          schema:
            type: string
      responses:
        200:
          description: 'Row count'
      security:
        - apiKeyHeader: []
      summary: 'Get row count of query'
      tags:
        - Tasks
      x-openapi-router-controller: api.task.model
  /tasks/{id}:
    delete:
      operationId: delete_task
      parameters:
        - description: 'The unique identifer for an Object (i.e. User, Task, Project,
            Submission etc)'
          in: path
          name: id
          required: true
          schema:
            pattern: ^[a-zA-Z0-9-]+$
            type: string
      responses:
        204:
          description: 'Task was deleted'
      security:
        - apiKeyHeader: []
      summary: 'Delete a single tasks'
      tags:
        - Tasks
      x-openapi-router-controller: api.task.model
    get:
      operationId: get_task
      parameters:
        - description: 'The unique identifer for an Object (i.e. User, Task, Project,
            Submission etc)'
          in: path
          name: id
          required: true
          schema:
            pattern: ^[a-zA-Z0-9-]+$
            type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: ./schemas.yaml#/components/schemas/Task
          description: 'Return task'
        404:
          description: 'Task does not exist'
      security:
        - apiKeyHeader: []
        - anonUser: []
      summary: 'Get a single task'
      tags:
        - Tasks
      x-openapi-router-controller: api.task.model
    put:
      operationId: update_task
      parameters:
        - description: 'The unique identifer for an Object (i.e. User, Task, Project,
            Submission etc)'
          in: path
          name: id
          required: true
          schema:
            pattern: ^[a-zA-Z0-9-]+$
            type: string
      requestBody:
        $ref: ./bodies.yaml#/components/requestBodies/Task
      responses:
        201:
          description: 'New task created'
      security:
        - apiKeyHeader: []
      summary: 'Modify/Create a task'
      tags:
        - Tasks
      x-openapi-router-controller: api.task.model
  /tasks/{id}/submissions:
    get:
      operationId: get_task_submissions
      parameters:
        - in: path
          name: id
          schema:
            type: string
        - in: query
          name: limit
          schema:
            default: 20
            minimum: 0
            type: integer
        - in: query
          name: offset
          schema:
            default: 0
            type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: ./schemas.yaml#/components/schemas/Submission
                type: array
          description: 'List of submissions'
      security:
        - apiKeyHeader: []
      summary: 'Get submissions for a specific task'
      tags:
        - Tasks
        - Submissions
      x-openapi-router-controller: api.task.custom
  /users/authorize:
    post:
      operationId: generate
      requestBody:
        $ref: ./bodies.yaml#/components/requestBodies/User
      responses:
        200:
          description: 'Token created'
      summary: 'Post auth for token response'
      tags:
        - Users
      x-openapi-router-controller: api.otoken
  /users/login:
    post:
      operationId: login
      requestBody:
        $ref: ./bodies.yaml#/components/requestBodies/User
        required: true
      responses:
        200:
          description: 'Login successful'
        401:
          description: 'Incorrect login details'
        404:
          description: 'User not found'
      summary: 'Allow a user to login'
      tags:
        - Users
      x-openapi-router-controller: api.user.custom
  /users/me:
    delete:
      operationId: delete_user
      responses:
        200:
          description: 'User deleted'
        401:
          description: 'Not authorised'
        404:
          description: 'User not found'
      security:
        - apiKeyHeader: []
      summary: 'Delete user (only allowed by the user themselves)'
      tags:
        - Users
      x-openapi-router-controller: api.user.model
    get:
      operationId: get_user
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: ./schemas.yaml#/components/schemas/User
          description: 'Return user'
        404:
          description: 'User not found'
      security:
        - apiKeyHeader: []
        - anonUser: []
      summary: 'Get specific user'
      tags:
        - Users
      x-openapi-router-controller: api.user.model
    put:
      operationId: update_user
      parameters:
        - description: 'The unique identifer for an Object (i.e. User, Task, Project,
            Submission etc)'
          in: path
          name: id
          required: true
          schema:
            pattern: ^[a-zA-Z0-9-]+$
            type: string
      requestBody:
        $ref: ./bodies.yaml#/components/requestBodies/UserUpdate
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: ./schemas.yaml#/components/schemas/User
          description: 'User updated'
        404:
          description: 'User not found'
      security:
        - apiKeyHeader: []
        - anonUser: []
      summary: 'Update user details (change password, add details etc)'
      tags:
        - Users
      x-openapi-router-controller: api.user.model
  /users/register:
    post:
      operationId: create_user
      requestBody:
        $ref: ./bodies.yaml#/components/requestBodies/User
      responses:
        201:
          description: 'Created user'
        409:
          description: 'User exists'
      summary: 'Registration end point for a user account'
      tags:
        - Users
      x-openapi-router-controller: api.user.model
  /users/reset:
    get:
      operationId: reset
      parameters:
        - in: query
          name: email
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Password reset'
      summary: 'Reset user password'
      tags:
        - Users
      x-openapi-router-controller: api.user.custom
    post:
      operationId: verify_reset
      requestBody:
        $ref: ./bodies.yaml#/components/requestBodies/User
      responses:
        200:
          description: 'Verified and reset'
        401:
          description: 'Unauthorised user'
      summary: 'Verify password reset token'
      tags:
        - Users
      x-openapi-router-controller: api.user.custom
  /users/submissions:
    get:
      operationId: get_subs
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: ./schemas.yaml#/components/schemas/Submission
                type: array
          description: 'Return submissions'
        404:
          description: 'User not found'
      security:
        - apiKeyHeader: []
      summary: 'Get all submissions for a user (or those matching an ID)'
      tags:
        - Users
        - Submissions
      x-openapi-router-controller: api.user.custom
  /users/validate:
    get:
      operationId: validate
      parameters:
        - in: query
          name: key
          schema:
            type: string
      responses:
        200:
          content:
            application/json:
              schema:
                type: object
          description: 'Token info object'
      summary: 'OAuth2 token info'
      tags:
        - Users
      x-openapi-router-controller: api.user.custom
servers:
  - description: 'Local Development Server'
    url: http://localhost:9000/api/v3
  - description: 'Staging Server'
    url: https://api-staging.citizenscience.ch/api/v3
  - description: 'Production API Server'
    url: https://api.citizenscience.ch/api/v3
