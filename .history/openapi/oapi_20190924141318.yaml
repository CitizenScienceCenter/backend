openapi: 3.0.0
info:
  title: CCCS
  version: "3.0.0"
servers:
  - url: http://0.0.0.0:8080/api/v3
    description: Local Development Server
  - url: https://api-staging.citizenscience.ch/api/v3
    description: Staging Server
  - url: https://api.citizenscience.ch/api/v3
    description: Production API Server
paths:
  /activities:
    get:
      tags:
        - Activities
      summary: Get all Activities
      operationId: get_activities
      parameters:
        - name: search_term
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 0
            default: 20
      responses:
        "200":
          description: Return Activities
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "./schemas.yaml#/components/schemas/Activity"
      x-openapi-router-controller: api.activity.model
    post:
      security:
        - apiKeyHeader:
            []
      tags:
        - Activities
      summary: Post a activity
      operationId: create_activity
      requestBody:
        $ref: "./bodies.yaml#/components/requestBodies/Activity"
      responses:
        "201":
          description: New Activity created
        "409":
          description: Activity already exists
      x-openapi-router-controller: api.activity.model
  /activities/count:
    get:
      security:
        - apiKeyHeader:
            []
      tags:
        - Activities
      summary: Get row count of query
      operationId: get_activity_count
      parameters:
        - name: search_term
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Row count
      x-openapi-router-controller: api.activity.model
  "/activities/{id}":
    get:
      security:
        - apiKeyHeader:
            []
        - anonUser:
            []
      tags:
        - Activities
      summary: Get a single activity
      operationId: get_activity
      parameters:
        - description: The unique identifer for an Object (i.e. User, Task, Project,
            Submission etc)
          name: id
          in: path
          required: true
          schema:
            type: string
            pattern: ^[a-zA-Z0-9-]+$
      responses:
        "200":
          description: Return Activity
        "404":
          description: Activity does not exist
      x-openapi-router-controller: api.activity.model
    put:
      security:
        - apiKeyHeader:
            []
      tags:
        - Activities
      summary: Modify/Create a Activity
      operationId: update_activity
      parameters:
        - description: The unique identifer for an Object (i.e. User, Task, Project,
            Submission etc)
          name: id
          in: path
          required: true
          schema:
            type: string
            pattern: ^[a-zA-Z0-9-]+$
      requestBody:
        $ref: "./bodies.yaml#/components/requestBodies/Activity"
      responses:
        "200":
          description: Activity modified
        "201":
          description: New Activity created
      x-openapi-router-controller: api.activity.model
    delete:
      security:
        - apiKeyHeader:
            []
      tags:
        - Activities
      summary: Remove an Activity
      operationId: delete_activity
      parameters:
        - description: The unique identifer for an Object (i.e. User, Task, Project,
            Submission etc)
          name: id
          in: path
          required: true
          schema:
            type: string
            pattern: ^[a-zA-Z0-9-]+$
      responses:
        "204":
          description: Activity was deleted
        "404":
          description: Activity does not exist
      x-openapi-router-controller: api.activity.model
  /comments:
    get:
      security:
        - apiKeyHeader:
            []
      tags:
        - Comments
      summary: Get a single comment
      operationId: get_comments
      parameters:
        - name: search_term
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 0
            default: 20
      responses:
        "200":
          description: List of comments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "./schemas.yaml#/components/schemas/Comment"
      x-openapi-router-controller: api.comment.model
    post:
      security:
        - apiKeyHeader:
            []
        - anonUser:
            []
      tags:
        - Comments
      summary: Post a comment
      operationId: create_comment
      requestBody:
        $ref: "./bodies.yaml#/components/requestBodies/Comment"
      responses:
        "201":
          description: Comment created
          content:
            application/json:
              schema:
                $ref: "./schemas.yaml#/components/schemas/Comment"
        "409":
          description: Comment already exists
      x-openapi-router-controller: api.comment.model
  "/comments/{id}":
    get:
      security:
        - apiKeyHeader:
            []
      tags:
        - Comments
      summary: Get a single comment
      operationId: get_comment
      parameters:
        - description: The unique identifer for an Object (i.e. User, Task, Project,
            Submission etc)
          name: id
          in: path
          required: true
          schema:
            type: string
            pattern: ^[a-zA-Z0-9-]+$
      responses:
        "200":
          description: Return comment
          content:
            application/json:
              schema:
                $ref: "./schemas.yaml#/components/schemas/Comment"
        "404":
          description: Comment does not exist
      x-openapi-router-controller: api.comment.model
    put:
      security:
        - apiKeyHeader:
            []
      tags:
        - Comments
      summary: Modify/Create a Comment
      operationId: update_comment
      parameters:
        - description: The unique identifer for an Object (i.e. User, Task, Project,
            Submission etc)
          name: id
          in: path
          required: true
          schema:
            type: string
            pattern: ^[a-zA-Z0-9-]+$
      requestBody:
        $ref: "./bodies.yaml#/components/requestBodies/Comment"
      responses:
        "200":
          description: Comment modified
        "201":
          description: New Comment created
      x-openapi-router-controller: api.comment.model
    delete:
      security:
        - apiKeyHeader:
            []
      tags:
        - Comments
      summary: Remove a Comment
      operationId: delete_comment
      parameters:
        - description: The unique identifer for an Object (i.e. User, Task, Project,
            Submission etc)
          name: id
          in: path
          required: true
          schema:
            type: string
            pattern: ^[a-zA-Z0-9-]+$
      responses:
        "204":
          description: Comment was deleted
        "404":
          description: Comment does not exist
      x-openapi-router-controller: api.comment.model
  /media:
    get:
      security:
        - apiKeyHeader:
            []
        - anonUser:
            []
      description: Get a list of media
      tags:
        - Media
      operationId: get_media
      parameters:
        - name: search_term
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 0
            default: 20
      responses:
        "200":
          description: List of media
      x-openapi-router-controller: api.media.model
    post:
      security:
        - apiKeyHeader:
            []
      description: The media details (for files already on the server or remotely hosted)
      tags:
        - Media
      operationId: create_medium
      requestBody:
        $ref: "./bodies.yaml#/components/requestBodies/Medium"
      responses:
        "200":
          description: Media attached
      x-openapi-router-controller: api.media.model
  "/media/source/{id}":
    get:
      security:
        - apiKeyHeader:
            []
        - anonUser:
            []
      tags:
        - Media
      summary: Query media for a specific task or project
      operationId: get_for_source
      parameters:
        - description: The unique identifer for an Object (i.e. User, Task, Project,
            Submission etc)
          name: id
          in: path
          required: true
          schema:
            type: string
            pattern: ^[a-zA-Z0-9-]+$
      responses:
        "200":
          description: Return Media
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "./schemas.yaml#/components/schemas/Media"
        "404":
          description: Media does not exist
      x-openapi-router-controller: api.media.custom
    delete:
      security:
        - apiKeyHeader:
            []
      tags:
        - Media
      summary: Delete all media files related to  source
      operationId: delete_medium
      parameters:
        - description: The unique identifer for an Object (i.e. User, Task, Project,
            Submission etc)
          name: id
          in: path
          required: true
          schema:
            type: string
            pattern: ^[a-zA-Z0-9-]+$
      responses:
        "200":
          description: Media deleted
        "404":
          description: Media does not exist
      x-openapi-router-controller: api.media.model
  "/media/{id}":
    get:
      security:
        - apiKeyHeader:
            []
        - anonUser:
            []
      tags:
        - Media
      summary: Get a single file
      operationId: get_medium
      parameters:
        - description: The unique identifer for an Object (i.e. User, Task, Project,
            Submission etc)
          name: id
          in: path
          required: true
          schema:
            type: string
            pattern: ^[a-zA-Z0-9-]+$
      responses:
        "200":
          description: Return Media
          content:
            application/json:
              schema:
                type: string
                format: binary
        "404":
          description: Media does not exist
      x-openapi-router-controller: api.media.model
    put:
      security:
        - apiKeyHeader:
            []
      tags:
        - Media
      summary: Put a single file
      operationId: update_medium
      parameters:
        - description: The unique identifer for an Object (i.e. User, Task, Project,
            Submission etc)
          name: id
          in: path
          required: true
          schema:
            type: string
            pattern: ^[a-zA-Z0-9-]+$
      requestBody:
        $ref: "./bodies.yaml#/components/requestBodies/Medium"
      responses:
        "201":
          description: Return Media
          content:
            application/json:
              schema:
                $ref: "./schemas.yaml#/components/schemas/Media"
        "404":
          description: Media does not exist
      x-openapi-router-controller: api.media.model
  "/media/upload":
    get:
      security:
        - apiKeyHeader:
            []
        - anonUser:
            []
      tags:
        - Media
      summary: Return pre-authorised url to upload media
      operationId: get_pre_signed_url
      parameters:
        - source_id: The unique identifer for an Object (i.e. User, Task, Project,
            Submission etc) to link to the media
          name: id
          in: query
          required: true
        - filename: The filename for the intended uploads
          name: filename
          in: query
          required: true
      responses:
        "200":
          description: Return presigned url
        "401":
          description: User does not have uploading access
      x-openapi-router-controller: api.media.custom
  /projects:
    get:
      tags:
        - Projects
      summary: Get all projects
      operationId: get_projects
      parameters:
        - name: search_term
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 0
            default: 20
      responses:
        "200":
          description: Return projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "./schemas.yaml#/components/schemas/Project"
      x-openapi-router-controller: api.project.model
    post:
      security:
        - apiKeyHeader:
            []
      tags:
        - Projects
      summary: Post a project
      operationId: create_project
      requestBody:
        $ref: "./bodies.yaml#/components/requestBodies/Project"
      responses:
        "201":
          description: New project created
        "409":
          description: Project already exists
      x-openapi-router-controller: api.project.model
  /projects/count:
    get:
      security:
        - apiKeyHeader:
            []
      tags:
        - Projects
      summary: Get row count of query
      operationId: get_project_count
      parameters:
        - name: search_term
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Row count
      x-openapi-router-controller: api.project.model
  "/projects/{id}":
    get:
      security:
        - apiKeyHeader:
            []
        - anonUser:
            []
      tags:
        - Projects
      summary: Get a single project
      operationId: get_project
      parameters:
        - description: The unique identifer for an Object (i.e. User, Task, Project,
            Submission etc)
          name: id
          in: path
          required: true
          schema:
            type: string
            pattern: ^[a-zA-Z0-9-]+$
      responses:
        "200":
          description: Return project
        "404":
          description: Project does not exist
      x-openapi-router-controller: api.project.model
    put:
      security:
        - apiKeyHeader:
            []
      tags:
        - Projects
      summary: Modify/Create a project
      operationId: update_project
      parameters:
        - description: The unique identifer for an Object (i.e. User, Task, Project,
            Submission etc)
          name: id
          in: path
          required: true
          schema:
            type: string
            pattern: ^[a-zA-Z0-9-]+$
      requestBody:
        $ref: "./bodies.yaml#/components/requestBodies/Project"
      responses:
        "200":
          description: Project modified
        "201":
          description: New project created
      x-openapi-router-controller: api.project.model
    delete:
      security:
        - apiKeyHeader:
            []
      tags:
        - Projects
      summary: Remove a project
      operationId: delete_project
      parameters:
        - description: The unique identifer for an Object (i.e. User, Task, Project,
            Submission etc)
          name: id
          in: path
          required: true
          schema:
            type: string
            pattern: ^[a-zA-Z0-9-]+$
      responses:
        "204":
          description: Project was deleted
        "404":
          description: Project does not exist
      x-openapi-router-controller: api.project.model
  "/projects/{id}/submissions":
    get:
      security:
        - apiKeyHeader:
            []
      tags:
        - Projects
      summary: Get submissions for a specific project
      operationId: get_project_submissions
      parameters:
        - name: id
          in: path
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 0
            default: 20
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
      responses:
        "200":
          description: List of submissions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "./schemas.yaml#/components/schemas/Submission"
      x-openapi-router-controller: api.project.custom
  "/submission/{id}":
    get:
      security:
        - apiKeyHeader:
            []
      tags:
        - Submissions
      summary: Get a single submission
      operationId: get_submission
      parameters:
        - description: The unique identifer for an Object (i.e. User, Task, Project,
            Submission etc)
          name: id
          in: path
          required: true
          schema:
            type: string
            pattern: ^[a-zA-Z0-9-]+$
      responses:
        "200":
          description: Return submission
          content:
            application/json:
              schema:
                $ref: "./schemas.yaml#/components/schemas/Submission"
        "404":
          description: Submission does not exist
      x-openapi-router-controller: api.submission.model
    put:
      security:
        - apiKeyHeader:
            []
      tags:
        - Submissions
      summary: Modify/Create a submission
      operationId: update_submission
      parameters:
        - description: The unique identifer for an Object (i.e. User, Task, Project,
            Submission etc)
          name: id
          in: path
          required: true
          schema:
            type: string
            pattern: ^[a-zA-Z0-9-]+$
      requestBody:
        $ref: "./bodies.yaml#/components/requestBodies/Submission"
      responses:
        "200":
          description: Submission modified
        "201":
          description: New submission created
      x-openapi-router-controller: api.submission.model
    delete:
      security:
        - apiKeyHeader:
            []
      tags:
        - Submissions
      summary: Remove a submission
      operationId: delete_submission
      parameters:
        - description: The unique identifer for an Object (i.e. User, Task, Project,
            Submission etc)
          name: id
          in: path
          required: true
          schema:
            type: string
            pattern: ^[a-zA-Z0-9-]+$
      responses:
        "204":
          description: Submission was deleted
        "404":
          description: Submission does not exist
      x-openapi-router-controller: api.submission.model
  /submissions:
    get:
      security:
        - apiKeyHeader:
            []
      tags:
        - Submissions
      summary: Get a single submission
      operationId: get_submissions
      parameters:
        - name: search_term
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 0
            default: 20
      responses:
        "200":
          description: List of submissions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "./schemas.yaml#/components/schemas/Submission"
      x-openapi-router-controller: api.submission.model
    post:
      security:
        - apiKeyHeader:
            []
        - anonUser:
            []
      tags:
        - Submissions
      summary: Post a submission
      operationId: create_submission
      requestBody:
        $ref: "./bodies.yaml#/components/requestBodies/Submission"
      responses:
        "201":
          description: Submission created
          content:
            application/json:
              schema:
                $ref: "./schemas.yaml#/components/schemas/Submission"
      x-openapi-router-controller: api.submission.model
  /submissions/count:
    get:
      security:
        - apiKeyHeader:
            []
      tags:
        - Submissions
      summary: Get row count of query
      operationId: get_submission_count
      parameters:
        - name: search_term
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Row count
      x-openapi-router-controller: api.submission.model
  /tasks:
    get:
      security:
        - apiKeyHeader:
            []
        - anonUser:
            []
      tags:
        - Tasks
      summary: Get a list of tasks
      operationId: get_tasks
      parameters:
        - name: offset
          in: query
          schema:
            type: number
            default: 0
        - name: search_term
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 0
            default: 20
      responses:
        "200":
          description: List of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "./schemas.yaml#/components/schemas/Task"
      x-openapi-router-controller: api.task.model
    post:
      security:
        - apiKeyHeader:
            []
      tags:
        - Tasks
      summary: Post an array of tasks
      operationId: create_tasks
      requestBody:
        $ref: "./bodies.yaml#/components/requestBodies/Task"
      responses:
        "201":
          description: Task created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "./schemas.yaml#/components/schemas/Task"
      x-openapi-router-controller: api.task.model
    delete:
      security:
        - apiKeyHeader:
            []
      tags:
        - Tasks
      summary: Delete an array of tasks
      operationId: delete_tasks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        "204":
          description: Tasks were deleted
      x-openapi-router-controller: api.task.custom
  /tasks/count:
    get:
      security:
        - apiKeyHeader:
            []
      tags:
        - Tasks
      summary: Get row count of query
      operationId: get_task_count
      parameters:
        - name: search_term
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Row count
      x-openapi-router-controller: api.task.model
  "/tasks/{id}":
    get:
      security:
        - apiKeyHeader:
            []
        - anonUser:
            []
      tags:
        - Tasks
      summary: Get a single task
      operationId: get_task
      parameters:
        - description: The unique identifer for an Object (i.e. User, Task, Project,
            Submission etc)
          name: id
          in: path
          required: true
          schema:
            type: string
            pattern: ^[a-zA-Z0-9-]+$
      responses:
        "200":
          description: Return task
          content:
            application/json:
              schema:
                $ref: "./schemas.yaml#/components/schemas/Task"
        "404":
          description: Task does not exist
      x-openapi-router-controller: api.task.model
    put:
      security:
        - apiKeyHeader:
            []
      tags:
        - Tasks
      summary: Modify/Create a task
      operationId: update_task
      parameters:
        - description: The unique identifer for an Object (i.e. User, Task, Project,
            Submission etc)
          name: id
          in: path
          required: true
          schema:
            type: string
            pattern: ^[a-zA-Z0-9-]+$
      requestBody:
        $ref: "./bodies.yaml#/components/requestBodies/Task"
      responses:
        "201":
          description: New task created
      x-openapi-router-controller: api.task.model
    delete:
      security:
        - apiKeyHeader:
            []
      tags:
        - Tasks
      summary: Delete a single tasks
      operationId: delete_task
      parameters:
        - description: The unique identifer for an Object (i.e. User, Task, Project,
            Submission etc)
          name: id
          in: path
          required: true
          schema:
            type: string
            pattern: ^[a-zA-Z0-9-]+$
      responses:
        "204":
          description: Task was deleted
      x-openapi-router-controller: api.task.model
  /users:
    get:
      security:
        - oauth2:
            []
      tags:
        - Users
      operationId: get_users
      parameters:
        - name: search_term
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 0
            default: 20
      responses:
        "200":
          description: Return all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "./schemas.yaml#/components/schemas/User"
      x-openapi-router-controller: api.user.model
  /users/authorize:
    post:
      tags:
        - Users
      summary: Post auth for token response
      operationId: generate
      requestBody:
        $ref: "./bodies.yaml#/components/requestBodies/User"
      responses:
        "200":
          description: Token created
      x-openapi-router-controller: api.otoken
  /users/login:
    post:
      tags:
        - Users
      summary: Allow a user to login
      operationId: login
      requestBody:
        $ref: "./bodies.yaml#/components/requestBodies/User"
        required: true
      responses:
        "200":
          description: Login successful
        "401":
          description: Incorrect login details
        "404":
          description: User not found
      x-openapi-router-controller: api.user.custom
  /users/register:
    post:
      tags:
        - Users
      summary: Registration end point for a user account
      operationId: create_user
      requestBody:
        $ref: "./bodies.yaml#/components/requestBodies/User"
      responses:
        "201":
          description: Created user
        "409":
          description: User exists
      x-openapi-router-controller: api.user.model
  /users/reset:
    get:
      tags:
        - Users
      summary: Reset user password
      operationId: reset
      parameters:
        - name: email
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Password reset
      x-openapi-router-controller: api.user.custom
    post:
      tags:
        - Users
      summary: Verify password reset token
      operationId: verify_reset
      requestBody:
        $ref: "./bodies.yaml#/components/requestBodies/User"
      responses:
        "200":
          description: Verified and reset
        "401":
          description: Unauthorised user
      x-openapi-router-controller: api.user.custom
  /users/validate:
    get:
      tags:
        - Users
      summary: OAuth2 token info
      operationId: validate
      parameters:
        - name: key
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Token info object
          content:
            application/json:
              schema:
                type: object
      x-openapi-router-controller: api.user.custom
  "/users/{id}":
    get:
      security:
        - apiKeyHeader:
            []
        - anonUser:
            []
      tags:
        - Users
      summary: Get all users (or those matching an ID)
      operationId: get_user
      parameters:
        - description: The unique identifer for an Object (i.e. User, Task, Project,
            Submission etc)
          name: id
          in: path
          required: true
          schema:
            type: string
            pattern: ^[a-zA-Z0-9-]+$
      responses:
        "200":
          description: Return users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "./schemas.yaml#/components/schemas/User"
        "404":
          description: User not found
      x-openapi-router-controller: api.user.model
    put:
      security:
        - apiKeyHeader:
            []
        - anonUser:
            []
      tags:
        - Users
      summary: Update user details (change password, add details etc)
      operationId: update_user
      parameters:
        - description: The unique identifer for an Object (i.e. User, Task, Project,
            Submission etc)
          name: id
          in: path
          required: true
          schema:
            type: string
            pattern: ^[a-zA-Z0-9-]+$
      requestBody:
        $ref: "./bodies.yaml#/components/requestBodies/UserUpdate" # separate because password is not required
      responses:
        "200":
          description: User updated
          content:
            application/json:
              schema:
                $ref: "./schemas.yaml#/components/schemas/User"
        "404":
          description: User not found
      x-openapi-router-controller: api.user.model
    delete:
      security:
        - apiKeyHeader:
            []
        - anonUser:
            []
      tags:
        - Users
      summary: Delete user (only allowed by the user themselves)
      operationId: delete_user
      parameters:
        - description: The unique identifer for an Object (i.e. User, Task, Project,
            Submission etc)
          name: id
          in: path
          required: true
          schema:
            type: string
            pattern: ^[a-zA-Z0-9-]+$
      responses:
        "200":
          description: User deleted
        "401":
          description: Not authorised
        "404":
          description: User not found
      x-openapi-router-controller: api.user.model
  "/users/{id}/submissions":
    get:
      security:
        - apiKeyHeader:
            []
        - anonUser:
            []
      tags:
        - Users
      summary: Get all submissions for a user (or those matching an ID)
      operationId: get_subs
      parameters:
        - description: The unique identifer for an Object (i.e. User, Task, Project,
            Submission etc)
          name: id
          in: path
          required: true
          schema:
            type: string
            pattern: ^[a-zA-Z0-9-]+$
      responses:
        "200":
          description: Return submissions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "./schemas.yaml#/components/schemas/Submission"
        "404":
          description: User not found
      x-openapi-router-controller: api.user.custom
components:
  securitySchemes:
    anonUser:
      type: apiKey
      name: X-ANON
      in: header
      x-apikeyInfoFunc: decorators.access_checks.ensure_anon_key
    apiKeyHeader:
      type: apiKey
      name: X-API-KEY
      in: header
      x-apikeyInfoFunc: decorators.access_checks.ensure_key
    oauth2:
      type: oauth2
      x-tokenInfoUrl: http://localhost:8081/api/v1/users/validate
      flows:
        implicit:
          authorizationUrl: http://localhost:8081/oauth/authorize
          scopes:
            apiKey: Unique identifier of the user accessing the service.
